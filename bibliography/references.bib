
@article{guldali_starthilfe_2010,
	title = {{STARTHILFE} {FÜR} {MODELLBASIERTES} {TESTEN}: {ENTSCHEIDUNGSUNTERSTÜTZUNG} {FÜR} {PROJEKT}- {UND} {TESTMANAGER}},
	url = {http://www.sigs-datacom.de/fileadmin/user_upload/zeitschriften/os/2010/03/gueldali_OS_03_10.pdf},
	abstract = {Modellbasiertes Testen ist eine Technik, die durch den Einsatz von abstrakten Modellen und geeigneten Algorithmen bestimmte manuelle Aktivitäten, wie z. B. das Testdesign, unterstützt. Die Einführung von modellbasiertem Testen hat das Potenzial, die Testüberdeckung durch die automatische Generierung von Testfällen zu erhöhen und somit das Vertrauen in die Software zu steigern. Den Einsparungen von manuellen Testaktivitäten steht aber der Zusatzaufwand für die Erstellung der Modelle gegenüber. Projekt- und Testmanager stehen also vor der Frage, ob modellbasiertes Testen in ihrer konkreten Testorganisation eine sinnvolle Investition darstellt. Dieser Artikel erklärt die wesentlichen Begriffe zum Thema modellbasiertes Testen und gibt Entscheidungsträgern eine heuristische Entscheidungshilfe an die Hand.},
	number = {3},
	journaltitle = {{OBJEKTspektrum}},
	author = {Güldali, Baris and Jungmayr, Stefan and Mlynarski, Michael and Neumann, Stefan and Winter, Mario},
	date = {2010}
}

@article{weisleder_modellbasiertes_2011,
	title = {{MODELLBASIERTES} {TESTEN}: {HYPE} {ODER} {REALITÄT}?},
	url = {http://www.sigs-datacom.de/fileadmin/user_upload/zeitschriften/os/2011/06/guildali_OS_06_11.pdf},
	abstract = {Manuelle Testerstellung verursacht hohe Kosten. Im Vergleich dazu bietet modellbasiertes
Testen große Vorteile hinsichtlich Testautomatisierung, früher Fehlerfindung, Erhöhung der
Testabdeckung, effizienten Testentwurfs und besserer Rückverfolgbarkeit. Die Einführung des
modellbasierten Testens ist jedoch mit Investitionen verbunden, für die die Rendite häufig
unklar erscheint. Dabei finden sich in der Literatur bereits etliche Erfahrungsberichte zur
erfolg reichen Einführung von modellbasiertem Testen in unterschiedlichen Anwendungs -
domänen. In diesem Artikel präsentieren wir einen Überblick über einige dieser Erfahrungs -
berichte},
	number = {6},
	journaltitle = {{OBJEKTspektrum}},
	author = {Weißleder, Stephan},
	date = {2011}
}

@article{pinheiro_model-based_2013,
	title = {Model-Based Testing of {RESTful} Web Services Using {UML} Protocol State Machines},
	url = {http://www.sjc.unifesp.br/sast2013/sites/all/files/www.sjc.unifesp.br.sast2013/files/model-based-testing-restful.pdf},
	author = {Pinheiro, Pedro Victor Pontes and Endo, Andre Takeshi and Simao, Adenilso},
	urldate = {2015-02-24},
	date = {2013}
}

@incollection{kaneiwa_consistency_2006,
	title = {Consistency Checking Algorithms for Restricted {UML} Class Diagrams},
	rights = {©2006 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-31782-1, 978-3-540-31784-5},
	url = {http://link.springer.com/chapter/10.1007/11663881_13},
	series = {Lecture Notes in Computer Science},
	abstract = {Automatic debugging of {UML} class diagrams helps in the visual specification of software systems because users cannot detect errors in logical inconsistency easily. This paper focuses on tractable consistency checking of {UML} class diagrams. We accurately identify inconsistencies in these diagrams by translating them into first-order predicate logic generalized by counting quantifiers and classify their expressivities by eliminating some components. For class diagrams of different expressive powers, we introduce optimized algorithms that compute their respective consistencies in P, {NP}, {PSPACE}, or {EXPTIME} with respect to the size of a class diagram. In particular, for two cases in which class diagrams contain (i) disjointness constraints and overwriting/multiple inheritances and (ii) these components along with completeness constraints, the restriction of attribute value types decreases the complexities from {EXPTIME} to P and {PSPACE}. Additionally, we confirm the existence of a meaningful restriction of class diagrams that prevents any logical inconsistency.},
	pages = {219--239},
	number = {3861},
	booktitle = {Foundations of Information and Knowledge Systems},
	publisher = {Springer Berlin Heidelberg},
	author = {Kaneiwa, Ken and Satoh, Ken},
	editor = {Dix, Jürgen and Hegner, Stephen J.},
	urldate = {2015-02-26},
	date = {2006},
	langid = {english},
	keywords = {Artificial Intelligence (incl. Robotics), Database Management, Discrete Mathematics in Computer Science, Information Storage and Retrieval, Logics and Meanings of Programs, User Interfaces and Human Computer Interaction},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/JJQPVHKW/10.html:text/html}
}

@article{sensler_testautomatisierung_2011,
	title = {Testautomatisierung mit modellgetriebener Testskript-Entwicklung},
	url = {http://www.sigs.de/publications/os/2006/03/kunz_sensler_OS_03_06.pdf},
	author = {Sensler, Carsten},
	date = {2011}
}

@book{utting_practical_2007,
	address = {Amsterdam ; Boston},
	title = {Practical {Model}-{Based} {Testing}. {A} {Tools} {Approach}},
	isbn = {9780123725011},
	abstract = {This book gives a practical introduction to model-based testing, showing how to write models for testing purposes and how to use model-based testing tools to generate test suites. It is aimed at testers and software developers who wish to use model-based testing, rather than at tool-developers or academics. The book focuses on the mainstream practice of functional black-box testing and covers different styles of models, especially transition-based models (UML state machines) and pre/post models (UML/OCL specifications and B notation). The steps of applying model-based testing are demonstrated on examples and case studies from a variety of software domains, including embedded software and information systems. From this book, you will learn: the basic principles and terminology of model-based testing; how model-based testing differs from other testing processes; how model-based testing fits into typical software lifecycles such as agile methods and the Unified Process; the benefits and limitations of model-based testing, its cost effectiveness and how it can reduce time-to-market; a step-by-step process for applying model-based testing; how to write good models for model-based testing; how to use a variety of test selection criteria to control the tests that are generated from your models; and how model-based testing can connect to existing automated test execution platforms such as Mercury Test Director, Java JUnit, and proprietary test execution environments. This book shows how model-based testing fits into the software lifecycle, its cost-effectiveness, and how it can reduce time to market. It offers guidance on how to use different kinds of modeling techniques, useful test generation strategies, how to apply model-based testing techniques to real applications using case studies.},
	language = {Englisch},
	publisher = {Elsevier Ltd, Oxford},
	author = {Utting, Mark and Legeard, Bruno},
	month = jan,
	year = {2007}
}


@misc{giese_warum_2002,
	title = {Warum explodierten Mariner 1, Ariane 5, ... oder: Was kümmern mich die Probleme der Datenverarbeitung},
	url = {https://web-docs.gsi.de/~giese/swr/},
	author = {Giese, Ingolf},
	month = feb,
	year = {2002}
}

@book{thaller_software-test:_2002,
	address = {Hannover},
	edition = {Auflage: 2., aktualis. u. erw. Aufl.},
	title = {Software-Test: Verifikation und Validation},
	isbn = {9783882291988},
	shorttitle = {Software-Test},
	language = {Deutsch},
	publisher = {Heise, H},
	author = {Thaller, Georg E.},
	month = apr,
	year = {2002}
}

@book{rossner_basiswissen_2010,
	title = {Basiswissen modellbasierter Test},
	url = {http://www.dpunkt.de/buecher/3064.html},
	abstract = {Modellbasiertes Testen ({MBT}) entwickelt sich von einer Forschungsdisziplin zu einer in der Industrie eingesetzten Praxis. Dieses Buch stellt die Grundlagen modellbasierten Testens dar und gibt einen Überblick über verschiedene Modellierungssprachen und -methoden. Es zeigt auf, welche Voraussetzungen für den Einsatz modellbasierter Testmethoden in einer Organisation zu schaffen sind, welche möglichen Fallstricke eine erfolgreiche Einführung verhindern können, wie man diese Fallstricke vermeidet und welche Qualitätsgewinne und Einsparungspotenziale durch {MBT} möglich sind.},
	author = {Rossner, Thomas and Brandes, Christian and Goetz, Helmut and Winter, Mario},
	urldate = {2015-02-20},
	date = {2010},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/3FK9CEVA/3064.html:text/html}
}

@book{vigenschow_objektorientiertes_2004,
	address = {Heidelberg},
	edition = {Auflage: 1., Aufl.},
	title = {Objektorientiertes Testen und Testautomatisierung in der Praxis: Konzepte, Techniken und Verfahren},
	isbn = {9783898643054},
	shorttitle = {Objektorientiertes Testen und Testautomatisierung in der Praxis},
	abstract = {Objektorientierte Software mit ihren spezifischen Fehlerquellen hat die Herausforderungen an die Softwareentwicklung erhöht. Wie können effizient qualitativ gute Programme geschrieben werden? Die Antwort darauf ist heutzutage ein modernes, testgetriebenes Design. Doch wie erreicht man eine minimale Anzahl von Testfällen, die ein Maximum der Fehlermöglichkeiten abdecken? Wie findet man aussagekräftige Testdaten? Wie kann bereits innerhalb der Softwareentwicklung automatisiert getestet werden? Das Buch stellt auf pragmatische Weise klassische und moderne Testtheorien und -verfahren vor. Dabei werden Lösungen für technische, analytische und methodische Probleme sowie zum Test von objektorientierter Software aufgezeigt. Auch auf organisatorische Faktoren und Teststrategien wird eingegangen. Die Umsetzung in der Praxis kann anhand von konkreten Beipielen für {JUnit}, {CppUnit} und {NUnit} nachvollzogen werden. Weiter wird gezeigt, wie der Einsatz von Testmustern den Test von objektorientierter Software erleichtern kann. Da im Zusammenhang mit Objektorientierung die {UML} als Modellierungssprache immer stärker in den Mittelpunkt rückt, wird exemplarisch dargestellt, wie {UML}-Diagramme im Rahmen eines inkrementell-iterativen Entwicklungsprozesses für die Testfall-Findung genutzt werden. Zusätzlich werden Lösungen für die Probleme beim Einsatz der {UML} durch den Versionswechsel von {UML} 1.* zu 2.0 vorgestellt. Neben der Objektorientierung und der Testautomatisierung liegt ein weiterer Schwerpunkt auf Realtime- und Embedded Systems mit ihren besonderen Anforderungen, u.a. wird der Aspekt der Robustheit behandelt. Auf der Buch-Website www.oo-testen.de finden sich der Sourcode der Beispiele und weitere hilfreiche Informationen zum Thema.},
	language = {Deutsch},
	publisher = {"dpunkt.verlag {GmbH}"},
	author = {Vigenschow, Uwe},
	month = sep,
	year = {2004}
}

% ----------------------------------------------------------
% This file was created with JabRef 2.7b.
% Encoding: ISO8859_1

@INBOOK{fankhauser:2009:softwaretechnik-security,
  chapter = {13},
  pages = {589--646},
  title = {Softwaretechnik - Mit Fallbeispielen aus realen Entwicklungsprojekten},
  publisher = {Pearson Studium},
  year = {2009},
  author = {Fankhauser, Florian and Schanes, Christian and Brem, Christian},
  address = {M{\"u}nchen},
  edition = {1},
  bibsource = {esse},
  url = {http://www.inso.tuwien.ac.at/publications/softwaretechnik/}
}

@OTHER{oasis:2010:homepage,
  author = {Oasis},
  lastchecked = {26.11.2011},
  title = {Organization for the advancement of structured information standards},
  url = {http://www.oasis-open.org},
  year = {2010}
}

@ARTICLE{schanes:2011:voip-fuzzer,
  author = {Schanes, Christian and Taber, Stefan and Popp, Karin and Fankhauser,
	Florian and Grechenig, Thomas},
  title = {Security Test Approach for Automated Detection of Vulnerabilities
	of SIP-based VoIP Softphones},
  journal = {International Journal On Advances in Security},
  year = {2011},
  volume = {4},
  pages = {95--105},
  number = {1 and 2},
  month = sep,
  abstract = {Voice over Internet Protocol based systems replace phone lines in
	many scenarios and are in wide use today. Automated security tests
	of such systems are required to detect implementation and configuration
	mistakes early and in an efficient way. In this paper we present
	a plugin for our fuzzer framework fuzzolution to automatically detect
	security vulnerabilities in Session Initiation Protocol based Voice
	over Internet Protocol softphones, which are examples for endpoints
	in such telephone systems. The presented approach automates the interaction
	with the Graphical User Interface of the softphones during test execution
	and also observes the behavior of the softphones using multiple metrics.
	Results of testing two open source softphones by using our fuzzer
	showed that various unknown vulnerabilities could be identified with
	the implemented plugin for our fuzzing framework.},
  bibsource = {esse},
  booktitle = {International Journal On Advances in Security, volume 4, numbers
	1 and 2, 2011},
  keywords = {ESSE, Software testing; Computer network security; Graphical user
	interfaces; Internet telephony; Fuzzing},
  publisher = {IEEE Computer Society Press},
  url = {\url{http://www.iariajournals.org/security/tocv4n12.html}}
}