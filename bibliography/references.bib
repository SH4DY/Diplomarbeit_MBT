@book{pol_management_2002,
	location = {Heidelberg},
	edition = {2},
	title = {Management und Optimierung des Testprozesses: Praktischer Leitfaden für erfolgreiches Software-Testen mit {TPI} und {TMap}},
	isbn = {9783898641562},
	shorttitle = {Management und Optimierung des Testprozesses},
	pagetotal = {543},
	publisher = {dpunkt},
	author = {Pol, Martin and Koomen, Tim and Spillner, Andreas},
	date = {2002}
}

@incollection{steffen_introduction_2011,
	title = {Introduction to Active Automata Learning from a Practical Perspective},
	rights = {©2011 Springer Berlin Heidelberg},
	isbn = {978-3-642-21454-7, 978-3-642-21455-4},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-21455-4_8},
	series = {Lecture Notes in Computer Science},
	abstract = {In this chapter we give an introduction to active learning of Mealy machines, an automata model particularly suited for modeling the behavior of realistic reactive systems. Active learning is characterized by its alternation of an exploration phase and a testing phase. During exploration phases so-called membership queries are used to construct hypothesis models of a system under learning. In testing phases so-called equivalence queries are used to compare respective hypothesis models to the actual system. These two phases are iterated until a valid model of the target system is produced. We will step-wisely elaborate on this simple algorithmic pattern, its underlying correctness arguments, its limitations, and, in particular, ways to overcome apparent hurdles for practical application. This should provide students and outsiders of the field with an intuitive account of the high potential of this challenging research area in particular concerning the control and validation of evolving reactive systems.},
	pages = {256--296},
	number = {6659},
	booktitle = {Formal Methods for Eternal Networked Software Systems},
	publisher = {Springer Berlin Heidelberg},
	author = {Steffen, Bernhard and Howar, Falk and Merten, Maik},
	editor = {Bernardo, Marco and Issarny, Valérie},
	urldate = {2015-03-30},
	date = {2011},
	langid = {english},
	keywords = {Information Systems Applications (incl.Internet), Mathematical Logic and Formal Languages, Programming Languages, Compilers, Interpreters, Software Engineering, Software Engineering/Programming and Operating Systems, learnlib},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/8SC4C4A6/978-3-642-21455-4_8.html:text/html}
}

@inproceedings{neubauer_automated_2012,
	location = {Piscataway, {NJ}, {USA}},
	title = {Automated Continuous Quality Assurance},
	isbn = {978-1-4673-1906-5},
	url = {http://dl.acm.org/citation.cfm?id=2663689.2663696},
	series = {{FormSERA} '12},
	abstract = {We present a case study that illustrates the power of active learning for enabling the automated quality assurance of complex and distributed evolving systems. We illustrate how the development of the {OCS}, Springer Verlag's Online Conference System, is supported by continuous learning-based testing, that by its nature maintains the synchrony of the running application and the learned (test) model. The evolution of the test model clearly indicates which portions of the system remain stable and which are altered. Thus our approach includes classical regression testing and feature interaction detection. We show concretely how model checking, automata learning, and quantitative analysis concur with the holistic quality assurance of this product.},
	pages = {37--43},
	booktitle = {Proceedings of the First International Workshop on Formal Methods in Software Engineering: Rigorous and Agile Approaches},
	publisher = {{IEEE} Press},
	author = {Neubauer, Johannes and Steffen, Bernhard and Bauer, Oliver and Windmüller, Stephan and Merten, Maik and Margaria, Tiziana and Howar, Falk},
	urldate = {2015-03-30},
	date = {2012},
	keywords = {active learning, model-based testing, quality assurance, learnlib}
}

@incollection{howar_learnlib_2012,
	title = {{LearnLib} Tutorial: From Finite Automata to Register Interface Programs},
	rights = {©2012 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-34025-3, 978-3-642-34026-0},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-34026-0_43},
	series = {Lecture Notes in Computer Science},
	shorttitle = {{LearnLib} Tutorial},
	abstract = {In the past decade, active automata learning, an originally merely theoretical enterprise, got attention as a method for dealing with black-box or third party systems. Applications ranged from the support of formal verification, e.g. for assume guarantee reasoning [4], to usage of learned models as the basis for regression testing. In the meantime, a number of approaches exploiting active learning for validation [17,20,6,7,2,1] emerged.},
	pages = {587--590},
	number = {7609},
	booktitle = {Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change},
	publisher = {Springer Berlin Heidelberg},
	author = {Howar, Falk and Isberner, Malte and Merten, Maik and Steffen, Bernhard},
	editor = {Margaria, Tiziana and Steffen, Bernhard},
	urldate = {2015-03-30},
	date = {2012},
	langid = {english},
	keywords = {Artificial Intelligence (incl. Robotics), Computation by Abstract Devices, Logics and Meanings of Programs, Operating Systems, Programming Languages, Compilers, Interpreters, Software Engineering, learnlib},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/KS8T3E8U/10.html:text/html}
}

@book{warmer_object_2004,
	location = {Bonn},
	title = {Object Constraint Language 2.0},
	isbn = {9783826614453},
	pagetotal = {240},
	publisher = {Mitp-Verlag},
	author = {Warmer, Jos and Kleppe, Anneke},
	date = {2004}
}


@article{_ieee_2008,
	title = {{IEEE} Standard for Software and System Test Documentation},
	doi = {10.1109/IEEESTD.2008.4578383},
	abstract = {Test processes determine whether the development products of a given activity conform to the requirements of that activity and whether the system and/or software satisfies its intended use and user needs. Testing process tasks are specified for different integrity levels. These process tasks determine the appropriate breadth and depth of test documentation. The documentation elements for each type of test documentation can then be selected. The scope of testing encompasses software-based systems, computer software, hardware, and their interfaces. This standard applies to software-based systems being developed, maintained, or reused (legacy, commercial off-the-shelf, Non-Developmental Items). The term "software" also includes firmware, microcode, and documentation. Test processes can include inspection, analysis, demonstration, verification, and validation of software and software-based system products.},
	pages = {1--150},
	journaltitle = {{IEEE} Std 829-2008},
	date = {2008-07},
	keywords = {829-2008, formal specification, {IEEE} standard, {IEEE} standards, integrity level, integrity level specification, life cycle, program testing, program verification, software inspection, software standards, Software testing, software validation, software verification, system documentation, system requirements analysis, system test documentation, test documentation, Testing},
	file = {IEEE Xplore Abstract Record:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/ISQ534XJ/articleDetails.html:text/html}
}

@book{teschl_mathematik_2013,
	location = {Berlin, Heidelberg},
	title = {Mathematik für Informatiker},
	isbn = {978-3-642-37971-0, 978-3-642-37972-7},
	url = {http://link.springer.com/10.1007/978-3-642-37972-7},
	series = {{eXamen}.press},
	publisher = {Springer Berlin Heidelberg},
	author = {Teschl, Gerald and Teschl, Susanne},
	urldate = {2015-08-21},
	date = {2013}
}

@book{grechenig_softwaretechnik:_2010,
	title = {Softwaretechnik: Mit Fallbeispielen aus realen Entwicklungsprojekten},
	isbn = {9783868940077},
	shorttitle = {Softwaretechnik},
	pagetotal = {692},
	publisher = {Pearson Deutschland {GmbH}},
	author = {Grechenig, Thomas},
	date = {2010},
	langid = {german}
}

@book{huth_logic_2004,
	location = {Cambridge U.K. ; New York},
	edition = {2 edition},
	title = {Logic in Computer Science: Modelling and Reasoning about Systems},
	isbn = {9780521543101},
	shorttitle = {Logic in Computer Science},
	pagetotal = {440},
	publisher = {Cambridge University Press},
	author = {Huth, Michael and Ryan, Mark},
	date = {2004-08-30}
}

@incollection{tyler_black-box_2004,
	title = {Black-Box Testing of Grey-Box Behavior},
	rights = {©2004 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-20894-5, 978-3-540-24617-6},
	url = {http://link.springer.com/chapter/10.1007/978-3-540-24617-6_1},
	series = {Lecture Notes in Computer Science},
	abstract = {Object-oriented frameworks are designed to provide functionality common to a variety of applications. Developers use these frameworks in building their own specialized applications, often without having the source code of the original framework. Unfortunately, the interactions between the framework components and the new application code can lead to behaviors that could not be predicted even if valid black-box specifications were provided for the framework components. What is needed are grey-box specifications that include information about sequences of method calls made by the original framework code. Our focus is on how to test frameworks against such specifications, which requires the ability to monitor such method calls made by the framework during testing. The problem is that without the source code of the framework, we cannot resort to code instrumentation to track these calls. We develop an approach that allows us to do this, and demonstrate it on a simple case study.},
	pages = {1--14},
	number = {2931},
	booktitle = {Formal Approaches to Software Testing},
	publisher = {Springer Berlin Heidelberg},
	author = {Tyler, Benjamin and Soundarajan, Neelam},
	editor = {Petrenko, Alexandre and Ulrich, Andreas},
	urldate = {2015-08-11},
	date = {2004},
	langid = {english},
	keywords = {Logics and Meanings of Programs, Programming Languages, Compilers, Interpreters, Software Engineering},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/VT74MSTZ/978-3-540-24617-6_1.html:text/html}
}

@article{parsick_lost_2015,
	title = {Lost in Tests},
	issn = {1619-795X},
	number = {9},
	journaltitle = {Java Magazin},
	shortjournal = {{JavaMag}},
	author = {Parsick, Sandra},
	date = {2015-08-06}
}


@online{posix_2008,
	title = {1003.1-2008 - Standard for Information Technology - Portable Operating System Interface ({POSIX}(R))},
	url = {https://standards.ieee.org/findstds/standard/1003.1-2008.html},
	urldate = {2015-08-05},
	date = {2008}
}

@inproceedings{clarke_counterexample-guided_2000,
	title = {Counterexample-guided abstraction refinement},
	url = {http://link.springer.com/chapter/10.1007/10722167_15},
	pages = {154--169},
	booktitle = {Computer aided verification},
	publisher = {Springer},
	author = {Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
	urldate = {2015-07-31},
	date = {2000},
	file = {[PDF] from dtic.mil:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/AVAV56KG/Clarke et al. - 2000 - Counterexample-guided abstraction refinement.pdf:application/pdf;Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/G9UZXA4D/10722167_15.html:text/html}
}

@incollection{clarke_model_2012,
	title = {Model checking and the state explosion problem},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-35746-6_1},
	pages = {1--30},
	booktitle = {Tools for Practical Software Verification},
	publisher = {Springer},
	author = {Clarke, Edmund M. and Klieber, William and Nováček, Miloš and Zuliani, Paolo},
	urldate = {2015-07-31},
	date = {2012},
	file = {[PDF] from cmu.edu:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/EF4A8QRR/Clarke et al. - 2012 - Model checking and the state explosion problem.pdf:application/pdf;Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/35DQ7PA2/978-3-642-35746-6_1.html:text/html}
}

@unpublished{binder_model-based_2014,
	title = {Model-based Testing: Taking {BDD}/{ATDD} to the Next Level},
	url = {http://www.slideshare.net/robertvbinder/taking-bddtothenextlevel},
	abstract = {Slides from presentation at the Chicago Quality Assurance Association, February 25, 2014. 

Acceptance Test Driven Development ({ATDD}) and Behavior Driven Development ({BDD}) are well-established Agile practices that rely on the knowledge and intuition of testers, product owners, and developers to identify and then translate statements into test suites. But the resulting test suites often cover only a small slice of happy-path behavior. And, as a {BDD} specification and its associated test code base grows over time, work to maintain it either crowds out new development and testing or, typically, is simply ignored. Either is high-risk. That’s how Agile teams get eaten by the testing {BackBlob}.Model Based Testing is a tool-based approach to automate the creation of test cases. This presentation will outline the techniques and benefits of {MBT}, and show how model-based testing can address both problems. A detailed demo of Spec Explorer, a free model-based testing tool shows how a model is constructed and used to create and maintain a test suite.},
	author = {Binder, Robert},
	urldate = {2015-07-27},
	date = {2014-02-25}
}

@online{north_official_2015,
	title = {Official {BDD} Wikipedia},
	titleaddon = {{BDDWiki}},
	author = {North, Dan},
	urldate = {2015-07-23},
	date = {2015-07-23}
}

@book{chelimsky_rspec_2010,
	title = {The {RSpec} book: Behaviour driven development with Rspec, Cucumber, and friends},
	url = {http://dl.acm.org/citation.cfm?id=1965448},
	shorttitle = {The {RSpec} book},
	publisher = {Pragmatic Bookshelf},
	author = {Chelimsky, David and Astels, Dave and Helmkamp, Bryan and North, Dan and Dennis, Zach and Hellesoy, Aslak},
	urldate = {2015-07-22},
	date = {2010},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/R7JUG774/citation.html:text/html}
}

@article{klein_sel4:_2010,
	title = {{seL}4: formal verification of an operating-system kernel},
	volume = {53},
	url = {http://dl.acm.org/citation.cfm?id=1743574},
	shorttitle = {{seL}4},
	pages = {107--115},
	number = {6},
	journaltitle = {Communications of the {ACM}},
	author = {Klein, Gerwin and Andronick, June and Elphinstone, Kevin and Heiser, Gernot and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and {others}},
	urldate = {2015-07-20},
	date = {2010},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/CDB8M2FE/citation.html:text/html}
}
@article{erdogmus_effectiveness_2005,
	title = {On the effectiveness of test-first approach to programming},
	url = {http://nparc.cisti-icist.nrc-cnrc.gc.ca/npsi/ctrl?action=rtdoc&an=5763742},
	author = {Erdogmus, Hakan},
	urldate = {2015-07-20},
	date = {2005},
	file = {[PDF] from nrc-cnrc.gc.ca:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/FQE4FAD2/Erdogmus - 2005 - On the effectiveness of test-first approach to pro.pdf:application/pdf}
}

@book{beck_extreme_2000,
  title={Extreme programming explained: embrace change},
  author={Beck, Kent},
  year={2000},
  publisher={Addison-Wesley Professional}
}

@book{spillner_software_2014,
  title={Software testing foundations: a study guide for the certified tester exam},
  author={Spillner, Andreas and Linz, Tilo and Schaefer, Hans},
  year={2014},
  publisher={Rocky Nook, Inc.}
}

@article{boehm_verifying_1984,
	title = {Verifying and validating software requirements and design specifications},
	volume = {1},
	url = {http://search.proquest.com/openview/354318cb8aa696975144cbcb65db5f86/1?pq-origsite=gscholar},
	pages = {75},
	number = {1},
	journaltitle = {{IEEE} software},
	author = {Boehm, Barry W.},
	urldate = {2015-07-10},
	date = {1984},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/RKNP9GRP/1.html:text/html}
}

@book{spillner_basiswissen_2012,
	title = {Basiswissen Softwaretest},
	url = {http://www.newbooks-services.de/MediaFiles/Texts/2/9783864900242_Excerpt_006.pdf},
	publisher = {dpunkt},
	author = {Spillner, Andreas and Linz, Tilo},
	urldate = {2015-07-10},
	date = {2012},
	file = {[PDF] from newbooks-services.de:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/IA9SAR45/Spillner and Linz - 2012 - Basiswissen Softwaretest.pdf:application/pdf}
}


@online{_graphwalker_2015,
	title = {{GraphWalker} modeling syntax},
	url = {http://graphwalker.org/docs/gw_model_syntax},
	urldate = {2015-06-01},
	date = {2015}
}

@inproceedings{lecomte_formal_2007,
	title = {Formal methods in safety-critical railway systems},
	url = {http://methode-b.com/dl/thierry_lecomte/Formal_methods_in_safety_critical_railway_systems.pdf},
	pages = {29--31},
	booktitle = {10th Brasilian Symposium on Formal Methods},
	author = {Lecomte, Thierry and Servat, Thierry and Pouzancre, Guilhem and {others}},
	urldate = {2015-07-07},
	date = {2007},
	file = {[PDF] von methode-b.com:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/EZI9VRKG/Lecomte et al. - 2007 - Formal methods in safety-critical railway systems.pdf:application/pdf}
}

@article{hart_formal_1968,
	title = {A Formal Basis for the Heuristic Determination of Minimum Cost Paths},
	volume = {4},
	issn = {0536-1567},
	doi = {10.1109/TSSC.1968.300136},
	abstract = {Although the problem of determining the minimum cost path through a graph arises naturally in a number of interesting applications, there has been no underlying theory to guide the development of efficient search procedures. Moreover, there is no adequate conceptual framework within which the various ad hoc search strategies proposed to date can be compared. This paper describes how heuristic information from the problem domain can be incorporated into a formal mathematical theory of graph searching and demonstrates an optimality property of a class of search strategies.},
	pages = {100--107},
	number = {2},
	journaltitle = {{IEEE} Transactions on Systems Science and Cybernetics},
	author = {Hart, P.E. and Nilsson, N.J. and Raphael, B.},
	date = {1968-07},
	keywords = {Automatic control, automatic programming, Chemical technology, Costs, Functional programming, Gradient methods, instruction sets, Mathematical programming, Minimax techniques, Minimization methods},
	file = {IEEE Xplore Abstract Record:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/K93IVMM5/login.html:text/html}
}

@book{graham_experiences_2012,
	location = {Upper Saddle River, {NJ}},
	edition = {1 edition},
	title = {Experiences of Test Automation: Case Studies of Software Test Automation},
	isbn = {9780321754066},
	shorttitle = {Experiences of Test Automation},
	abstract = {Software test automation has moved beyond a luxury to become a necessity. Applications and systems have grown ever larger and more complex, and manual testing simply cannot keep up. As technology changes, and more organizations move into agile development, testing must adapt—and quickly. Test automation is essential, but poor automation is wasteful—how do you know where your efforts will take you?        Authors Dorothy Graham and Mark Fewster wrote the field’s seminal text, Software Test Automation, which has guided many organizations toward success. Now, in  Experiences of Test Automation,  they reveal test automation at work in a wide spectrum of organizations and projects, from complex government systems to medical devices, {SAP} business process development to Android mobile apps and cloud migrations. This book addresses both management and technical issues, describing failures and successes, brilliant ideas and disastrous decisions and, above all, offers specific lessons you can use.     Coverage includes         Test automation in agile development       How management support can make or break successful automation       The importance of a good testware architecture and abstraction levels       Measuring benefits and Return on Investment ({ROI})       Management issues, including skills, planning, scope, and expectations       Model-Based Testing ({MBT}), monkey testing, and exploratory test automation       The importance of standards, communication, documentation, and flexibility in enterprise-wide automation       Automating support activities       Which tests to automate, and what not to automate       Hidden costs of automation: maintenance and failure analysis       The right objectives for test automation: why “finding bugs” may not be a good objective       Highlights, consisting of lessons learned, good points, and helpful tips           Experiences of Test Automation  will be invaluable to everyone considering, implementing, using, or managing test automation. Testers, analysts, developers, automators and automation architects, test managers, project managers, {QA} professionals, and technical directors will all benefit from reading this book.},
	pagetotal = {672},
	publisher = {Addison-Wesley Professional},
	author = {Graham, Dorothy and Fewster, Mark},
	date = {2012-01-19}
}

@book{wagner_modeling_2006,
	title = {Modeling Software with Finite State Machines: A Practical Approach},
	shorttitle = {Modeling Software with Finite State Machines},
	pagetotal = {392},
	publisher = {Auerbach Publications},
	author = {Wagner, Ferdinand and Schmuki, Ruedi and Wagner, Thomas and Wolstenholme, Peter},
	date = {2006}
}

@incollection{baker_model-driven_2005,
	title = {Model-Driven Engineering in a Large Industrial Context — Motorola Case Study},
	rights = {©2005 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-29010-0, 978-3-540-32057-9},
	url = {http://link.springer.com/chapter/10.1007/11557432_36},
	series = {Lecture Notes in Computer Science},
	abstract = {In an ongoing effort to reduce development costs in spite of increasing system complexity, Motorola has been a long-time adopter of Model-Driven Engineering ({MDE}) practices. The foundation of this approach is the creation of rigorous models throughout the development process, thereby enabling the introduction of automation. In this paper we present our experiences within Motorola in deploying a top-down approach to {MDE} for more than 15 years. We describe some of the key competencies that have been developed and the impact of {MDE} within the organization. Next we present some of the main issues encountered during {MDE} deployment, together with some possible resolutions.},
	pages = {476--491},
	number = {3713},
	booktitle = {Model Driven Engineering Languages and Systems},
	publisher = {Springer Berlin Heidelberg},
	author = {Baker, Paul and Loh, Shiou and Weil, Frank},
	editor = {Briand, Lionel and Williams, Clay},
	urldate = {2015-05-12},
	date = {2005},
	langid = {english},
	keywords = {Management of Computing and Information Systems, Programming Languages, Compilers, Interpreters, Simulation and Modeling, Software Engineering},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/4HT7KKHN/10.html:text/html}
}

@book{linz_testing_2014,
	location = {Santa Barbara, {CA}},
	edition = {1 edition},
	title = {Testing in Scrum: A Guide for Software Quality Assurance in the Agile World},
	isbn = {9781937538392},
	shorttitle = {Testing in Scrum},
	abstract = {These days, more and more software development projects are being carried out using agile methods like Scrum. Agile software development promises higher software quality, a shorter time to market, and improved focus on customer needs.However, the transition to working within an agile methodology is not easy. Familiar processes and procedures change drastically. Software testing and software quality assurance have a crucial role in ensuring that a software development team, department, or company successfully implements long-term agile development methods and benefits from this framework. This book discusses agile methodology from the perspective of software testing and software quality assurance management. Software development managers, project managers, and quality assurance managers will obtain tips and tricks on how to organize testing and assure quality so that agile projects maintain their impact. Professional certified testers and software quality assurance experts will learn how to work successfully within agile software teams and how best to integrate their expertise.Topics include:Agile methodology and classic process {modelsHow} to plan an agile {projectUnit} tests and test first {approachIntegration} testing and continuous {integrationSystem} testing and test {nonstopQuality} management and quality {assuranceAlso} included are five case studies from the manufacturing, online-trade, and software industry as well as test exercises for self-assessment.This book covers the new {ISTQB} Syllabus for Agile Software Testing and is a relevant resource for all students and trainees worldwide who plan to undertake this {ISTQB} certification.},
	pagetotal = {240},
	publisher = {Rocky Nook},
	author = {Linz, Tilo},
	date = {2014-04-07}
}
@book{_model-driven_2007,
	author={Baker, Paul and Zhen, Ru Dai},
	location = {Berlin, Heidelberg},
	title = {Model-Driven Testing},
	isbn = {978-3-540-72562-6},
	url = {http://link.springer.com/10.1007/978-3-540-72563-3},
	publisher = {Springer Berlin Heidelberg},
	urldate = {2015-05-05},
	date = {2007},
	langid = {english}
}
@article{stobie_model_2005,
	title = {Model Based Testing in Practice at Microsoft},
	volume = {111},
	issn = {1571-0661},
	url = {http://www.sciencedirect.com/science/article/pii/S1571066104052296},
	doi = {10.1016/j.entcs.2004.12.004},
	series = {Proceedings of the Workshop on Model Based Testing ({MBT} 2004) Workshop on Model Based Testing 2004},
	abstract = {As part of Microsofts Trustworthy Computing [Trustworthy Computing : Reliability {URL} http://www.microsoft.com/mscorp/twc/reliability/default.mspx] initiative the company has sought many ways to increase reliability. One approach being extensively investigated and used is Model Based Testing. With a Finite State Machine modeling tool ({TMT}) successfully deployed and in use by many test groups, a need for more powerful and exible modeling has arisen. Several product groups are exploring the use of the Abstract State Machine Language ({AsmL}) and its associated test tool ({AsmL}/T). Results from both approaches have shown an increased ability to nd defects earlier, including in the specification and design stages, as well as achieve higher structural code coverage on the actual systems under test.},
	pages = {5--12},
	journaltitle = {Electronic Notes in Theoretical Computer Science},
	shortjournal = {Electronic Notes in Theoretical Computer Science},
	author = {Stobie, Keith},
	urldate = {2015-04-28},
	date = {2005-01-01},
	keywords = {automated test case generation, formal testing methods, test selection},
}

@inproceedings{craggs_agedis_2003,
	title = {Agedis case studies: Model-based testing in industry},
	publisher = {Citeseer},
	author = {Craggs, Ian and Sardis, Manolis and Heuillard, Thierry},
	date = {2003}
}
@incollection{prenninger_mbt_2005,
	title = {{MBT} of Reactive Systems - Chap. Case Studies},
	rights = {©2005 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-26278-7, 978-3-540-32037-1},
	url = {http://link.springer.com/chapter/10.1007/11498490_19},
	series = {Lecture Notes in Computer Science},
	abstract = {In this chapter, we review and analyze some of the significant case studies published on the application of model-based testing. We focus on case studies done in industrial contexts in order to evaluate how model-based testing is applied in practice and how far it is applied. But we also review a few proof of concept and benchmarking case studies. We review case studies on model-based testing of processors [{DBG}01, {SA}99, {FKL}99], smart cards [{PPS}+03, {CJRZ}01], protocols [{KVZ}98, {BFdV}+99], Java and {POSIX} [{FHP}02]. This list is not exhaustive; but it is a good representation of the range of applications, methods and tools used in the available model-based testing case studies. There could be other case studies which we did not detect or have been published recently.},
	pages = {439--461},
	number = {3472},
	booktitle = {Model-Based Testing of Reactive Systems},
	publisher = {Springer Berlin Heidelberg},
	author = {Prenninger, Wolfgang and El-Ramly, Mohammad and Horstmann, Marc},
	editor = {Broy, Manfred and Jonsson, Bengt and Katoen, Joost-Pieter and Leucker, Martin and Pretschner, Alexander},
	urldate = {2015-04-27},
	date = {2005},
	langid = {english},
	keywords = {Logics and Meanings of Programs, Programming Languages, Compilers, Interpreters, Software Engineering}
}


@inproceedings{ulrich_introducing_2007,
	title = {Introducing model-based testing techniques in industrial projects.},
	url = {http://cs.emis.de/LNI/Proceedings/Proceedings106/gi-proc-106-002.pdf},
	pages = {29--34},
	booktitle = {Software Engineering (Workshops)},
	author = {Ulrich, Andreas},
	urldate = {2015-02-19},
	date = {2007}
}

@inproceedings{sarma_model-based_2010,
	location = {New York, {NY}, {USA}},
	title = {Model-based Testing in Industry: A Case Study with Two {MBT} Tools},
	isbn = {978-1-60558-970-1},
	url = {http://doi.acm.org/10.1145/1808266.1808279},
	doi = {10.1145/1808266.1808279},
	series = {{AST} '10},
	shorttitle = {Model-based Testing in Industry},
	abstract = {Traditional testing techniques may not always be suitable for adequate, thorough, and extensible testing of critical and complex software in a resource and time constrained software development environment. Model-based testing ({MBT}) is an evolving technique for generating test cases automatically from a behavioral model of a system under test. For a Siemens industrial project in the healthcare domain high quality, reliable and robust software is indispensable. Thus, we must ensure rigorous testing using a model based approach. We specify nine essential criteria to be satisfied to ensure the quality of the medical software with {MBT}. We have selected two recently launched {MBT} tools, namely Conformiq's Qtronic 2.0 and Microsoft's {SpecExplorer} 2010 V3.0, to see how far the criteria set for testing are achieved by these two tools. This paper reports on the evaluation of the tools and discusses the scope and objectives of future generation {MBT} tools.},
	pages = {87--90},
	booktitle = {Proceedings of the 5th Workshop on Automation of Software Test},
	publisher = {{ACM}},
	author = {Sarma, Monalisa and Murthy, P. V. R. and Jell, Sylvia and Ulrich, Andreas},
	urldate = {2015-02-19},
	date = {2010},
	keywords = {evaluation, model-based testing, Software testing, systematic review, test case generation, testing practice in industry}
	}

@article{narendra_learning_1974,
	title = {Learning {Automata} - {A} {Survey}},
	volume = {SMC-4},
	issn = {0018-9472},
	doi = {10.1109/TSMC.1974.5408453},
	abstract = {Stochastic automata operating in an unknown random environment have been proposed earlier as models of learning. These automata update their action probabilities in accordance with the inputs received from the environment and can improve their own performance during operation. In this context they are referred to as learning automata. A survey of the available results in the area of learning automata has been attempted in this paper. Attention has been focused on the norms of behavior of learning automata, issues in the design of updating schemes, convergence of the action probabilities, and interaction of several automata. Utilization of learning automata in parameter optimization and hypothesis testing is discussed, and potential areas of application are suggested.},
	number = {4},
	journal = {IEEE Transactions on Systems, Man and Cybernetics},
	author = {Narendra, K.S. and Thathachar, M.},
	month = jul,
	year = {1974},
	pages = {323--334},
}

@incollection{grieskamp_microsofts_2010,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Microsoft’s {Protocol} {Documentation} {Program}: {A} {Success} {Story} for {Model}-{Based} {Testing}},
	copyright = {©2010 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-15584-0, 978-3-642-15585-7},
	shorttitle = {Microsoft’s {Protocol} {Documentation} {Program}},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-15585-7_3},
	abstract = {Microsoft is producing interoperability documentation for Windows client-server and server-server protocols. The Winterop team in the Windows organization is responsible for verifying the documentation to ensure its quality. Various test-driven methods are being applied including, when appropriate, a model- based approach. This talk describes core aspects of the quality assurance process and tools that were put in place, and specifically focuses on model-based testing (MBT), using Microsoft’s Spec Explorer technology. Though MBT has been applied successfully to features and products before, this is the first attempt to use it in such a large scale and in the context of a business-critical area within Microsoft, and to the best of the author’s knowledge throughout the whole industry. Empirical results confirm that MBT not only works and that it scales, provided it is accompanied by good tool support and clear methodological guidance, but also that it delivers significant productivity gains when compared to traditional testing in a similar domain and with the same people resources. The method to measure this is based on the effort per end-to-end tested requirement (including not only test design, but also test harnessing and test execution), over a probe of 9,844 requirements in test suites using MBT and 8,728 requirements in non-MBT test suites, with an average effort of 1.39 person days for MBT-tested requirement, and 2.37 person days for traditionally-tested requirement, documenting a productivity gain of 42\%. A detailed account of this work is scheduled to appear in the journal for Software Testing and Verification (STVR) under the title Model-based Quality Assurance of Protocol Documentation: Tools and Methodology.},
	language = {en},
	number = {6303},
	urldate = {2014-10-21},
	booktitle = {Testing – {Practice} and {Research} {Techniques}},
	publisher = {Springer Berlin Heidelberg},
	author = {Grieskamp, Wolfgang},
	editor = {Bottaci, Leonardo and Fraser, Gordon},
	month = jan,
	year = {2010},
	keywords = {Computer Communication Networks, Logics and Meanings of Programs, Mathematical Logic and Formal Languages, Programming Languages, Compilers, Interpreters, Programming Techniques, Software Engineering},
	pages = {7--7},
}

@incollection{alegroth_industrial_2014,
	title = {Industrial Application of Visual {GUI} Testing: Lessons Learned},
	rights = {©2014 Springer International Publishing Switzerland},
	isbn = {978-3-319-11282-4, 978-3-319-11283-1},
	url = {http://link.springer.com/chapter/10.1007/978-3-319-11283-1_11},
	shorttitle = {Industrial Application of Visual {GUI} Testing},
	abstract = {A large body of academic knowledge has been devoted to automated software testing in order to support the software market’s demands for continuous software delivery. However, most of these automated techniques approach testing from lower levels of system abstraction, e.g., component level, which limit their applicability for high-level regression testing of, for instance, system and acceptance tests, thus forcing companies to perform these test activities manually, which is considered time consuming, tedious, and error prone. In this book chapter, we present visual {GUI} testing ({VGT}), a tool driven test technique that uses image recognition in order to interact and assert the correctness of a system under test ({SUT}) through the bitmap graphical user interface ({GUI}) that is shown to the user on the computer monitor. This approach makes {VGT} flexible and applicable to any {SUT} with a {GUI} but also allows {VGT} tools to emulate end-user behavior and therefore automate previously manual system and acceptance test cases. In addition to presenting the technique itself, this chapter will also present some {VGT} tools and empirically identified problems with the technique and how these problems can be mitigated in practice. Finally we will discuss how {VGT} can be used in the context of continuous software development in order to support market demands for quicker software delivery.},
	pages = {127--140},
	booktitle = {Continuous Software Engineering},
	publisher = {Springer International Publishing},
	author = {Alégroth, Emil and Feldt, Robert},
	editor = {Bosch, Jan},
	urldate = {2015-03-18},
	date = {2014},
	langid = {english},
	keywords = {Innovation/Technology Management, Management of Computing and Information Systems, Software Engineering},
	file = {Full Text PDF:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/4ME6U4ZK/Alégroth and Feldt - 2014 - Industrial Application of Visual GUI Testing Less.pdf:application/pdf;Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/MI2VMZCW/978-3-319-11283-1_11.html:text/html}
}
@book{broy_model-based_2005,
	location = {Secaucus, {NJ}, {USA}},
	title = {Model-Based Testing of Reactive Systems: Advanced Lectures (Lecture Notes in Computer Science)},
	isbn = {3540262784},
	shorttitle = {Model-Based Testing of Reactive Systems},
	publisher = {Springer-Verlag New York, Inc.},
	author = {Broy, Manfred and Jonsson, Bengt and Katoen, Joost-Pieter and Leucker, Martin and Pretschner, Alexander},
	date = {2005}
}

@book{dustin_software_2000,
	title = {Software automatisch testen: Verfahren, Handhabung und Leistung ; mit ... 100 Tabellen},
	isbn = {9783540676393},
	shorttitle = {Software automatisch testen},
	abstract = {Die Autoren stellen die praktische Handhabung und die Werkzeuge für automatische Software-Testverfahren ausführlich dar. Besondere Berücksichtigung findet dabei die Qualitätssicherung sowohl beim Test-Design, bei den verwendeten Testwerkzeugen als auch bei der Dokumentation der Ergebnisse. Das Buch führt den Praktiker Schritt für Schritt durch den Test-Prozeß von der anfänglichen Planung, Implementierung, Management bis zum Report.Die {CD}-{ROM} enthält umfangreiche {PDF}-Dokumente zu automatischen Testverfahren, insbesondere zu {ATLM} (Automated Test Life-Cycle Methodology).},
	pagetotal = {680},
	publisher = {Springer Berlin Heidelberg},
	author = {Dustin, Elfriede and Rashka, Jeff and Paul, John},
	date = {2000-11-06},
	langid = {german},
	keywords = {Computers / Computer Science, Computers / Hardware / Mobile Devices, Computers / Information Technology, Computers / Programming / General, Computers / Software Development \& Engineering / General, Computers / Software Development \& Engineering / Systems Analysis \& Design}
}

@incollection{ernits_model-based_2009,
	title = {Model-Based Testing of Web Applications Using {NModel}},
	rights = {©2009 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-05030-5, 978-3-642-05031-2},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-05031-2_14},
	series = {Lecture Notes in Computer Science},
	abstract = {We show how model-based on-the-fly testing can be applied in the context of web applications using the {NModel} toolkit. The concrete case study is a commercial web-based positioning system called {WorkForce} Management ({WFM}) which interacts with a number of other services, such as billing and positioning, through a mobile operator. We describe the application and the testing, and discuss the test results.},
	pages = {211--216},
	number = {5826},
	booktitle = {Testing of Software and Communication Systems},
	publisher = {Springer Berlin Heidelberg},
	author = {Ernits, Juhan and Roo, Rivo and Jacky, Jonathan and Veanes, Margus},
	editor = {Núñez, Manuel and Baker, Paul and Merayo, Mercedes G.},
	urldate = {2014-10-21},
	date = {2009-01-01},
	langid = {english},
	keywords = {Algorithm Analysis and Problem Complexity, Logics and Meanings of Programs, Programming Languages, Compilers, Interpreters, Programming Techniques, Simulation and Modeling, Software Engineering},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/6QCJMDIG/10.html:text/html}
}

@incollection{hartman_agedis_2005,
	title = {The {AGEDIS} Tools for Model Based Testing},
	rights = {©2005 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-25081-4, 978-3-540-31797-5},
	url = {http://link.springer.com/chapter/10.1007/978-3-540-31797-5_33},
	series = {Lecture Notes in Computer Science},
	abstract = {We describe the tools and interfaces created by the {AGEDIS} project, a European Commission sponsored project for the creation of a methodology and tools for automated model driven test generation and execution for distributed systems. The project includes an integrated environment for modeling, test generation, test execution, and other test related activities. The tools support a {UML} based testing methodology that features a large degree of automation and also includes a feedback loop integrating coverage and defect analysis tools with the test generator and execution framework.},
	pages = {277--280},
	number = {3297},
	booktitle = {{UML} Modeling Languages and Applications},
	publisher = {Springer Berlin Heidelberg},
	author = {Hartman, Alan and Nagin, Kenneth},
	editor = {Nunes, Nuno Jardim and Selic, Bran and Silva, Alberto Rodrigues da and Alvarez, Ambrosio Toval},
	urldate = {2014-10-21},
	date = {2005-01-01},
	langid = {english},
	keywords = {Management of Computing and Information Systems, Programming Languages, Compilers, Interpreters, Simulation and Modeling, Software Engineering},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/2I4ZEINE/10.html:text/html}
}

@article{nguyen_guitar:_2014,
	title = {{GUITAR}: an innovative tool for automated testing of {GUI}-driven software},
	volume = {21},
	issn = {0928-8910, 1573-7535},
	url = {http://link.springer.com/article/10.1007/s10515-013-0128-9},
	doi = {10.1007/s10515-013-0128-9},
	shorttitle = {{GUITAR}},
	abstract = {Most of today’s software applications feature a graphical user interface ({GUI}) front-end. System testing of these applications requires that test cases, modeled as sequences of {GUI} events, be generated and executed on the software. We term {GUI} testing as the process of testing a software application through its {GUI}. Researchers and practitioners agree that one must employ a variety of techniques (e.g., model-based, capture/replay, manually scripted) for effective {GUI} testing. Yet, the tools available today for {GUI} testing are limited in the techniques they support. In this paper, we describe an innovative tool called {GUITAR} that supports a wide variety of {GUI} testing techniques. The innovation lies in the architecture of {GUITAR}, which uses plug-ins to support flexibility and extensibility. Software developers and quality assurance engineers may use this architecture to create new toolchains, new workflows based on the toolchains, and plug in a variety of measurement tools to conduct {GUI} testing. We demonstrate these features of {GUITAR} via several carefully crafted case studies.},
	pages = {65--105},
	number = {1},
	journaltitle = {Automated Software Engineering},
	shortjournal = {Autom Softw Eng},
	author = {Nguyen, Bao N. and Robbins, Bryan and Banerjee, Ishan and Memon, Atif},
	urldate = {2014-10-21},
	date = {2014-03-01},
	langid = {english},
	keywords = {Artificial Intelligence (incl. Robotics), {GUI} testing, Software Engineering/Programming and Operating Systems, Test automation, Test generation},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/XAJKUZPU/s10515-013-0128-9.html:text/html}
}

@incollection{tretmans_model-based_2011,
	title = {Model-Based Testing and Some Steps towards Test-Based Modelling},
	rights = {©2011 Springer Berlin Heidelberg},
	isbn = {978-3-642-21454-7, 978-3-642-21455-4},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-21455-4_9},
	series = {Lecture Notes in Computer Science},
	abstract = {Model-based testing is one of the promising technologies to increase the efficiency and effectiveness of software testing. In model-based testing, a model specifies the required behaviour of a system, and test cases are algorithmically generated from this model. Obtaining a valid model, however, is often difficult if the system is complex, contains legacy or third-party components, or if documentation is incomplete. Test-based modelling, also called automata learning, turns model-based testing around: it aims at automatically generating a model from test observations. This paper first gives an overview of formal, model-based testing in general, and of model-based testing for labelled transition system models in particular. Then the practice of model-based testing, the difficulty of obtaining models, and the role of learning are discussed. It is shown that model-based testing and learning are strongly related, and that learning can be fully expressed in the concepts of model-based testing. In particular, test coverage in model-based testing and precision of learned models turn out to be two sides of the same coin.},
	pages = {297--326},
	number = {6659},
	booktitle = {Formal Methods for Eternal Networked Software Systems},
	publisher = {Springer Berlin Heidelberg},
	author = {Tretmans, Jan},
	editor = {Bernardo, Marco and Issarny, Valérie},
	urldate = {2014-10-21},
	date = {2011-01-01},
	langid = {english},
	keywords = {automata learning, Information Systems Applications (incl.Internet), Mathematical Logic and Formal Languages, model-based testing, Programming Languages, Compilers, Interpreters, Software Engineering, Software Engineering/Programming and Operating Systems, test-based modelling},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/KTT4JKJU/10.html:text/html}
}

@incollection{zech_generic_2012,
	title = {A Generic Platform for Model-Based Regression Testing},
	rights = {©2012 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-34025-3, 978-3-642-34026-0},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-34026-0_9},
	series = {Lecture Notes in Computer Science},
	abstract = {Model-based testing has gained widespread acceptance in the last few years. Models enable the platform independent analysis and design of tests in an early phase of software development resulting in effort reduction in terms of time and money. Furthermore, test models are easier to maintain than test code when software systems evolve due to their platform independence and traceability support. Nevertheless, most regression testing approaches, which ensure that system evolution does not introduce unintended effects, are solely code-based. Additionally, many model-based testing approaches do not consider regression testing when applied in practice, mainly due to the lack of appropriate tool support. Therefore, in this paper we present a generic tool platform for model-based regression testing based on the model versioning and evolution framework {MoVE}. Our approach enhances existing model-based testing approaches with regression testing capabilities aiming at better tool support for model-based regression testing. In a case study, we apply our platform to the model-based testing approaches {UML} Testing Profile and Telling {TestStories}.},
	pages = {112--126},
	number = {7609},
	booktitle = {Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change},
	publisher = {Springer Berlin Heidelberg},
	author = {Zech, Philipp and Felderer, Michael and Kalb, Philipp and Breu, Ruth},
	editor = {Margaria, Tiziana and Steffen, Bernhard},
	urldate = {2014-10-21},
	date = {2012-01-01},
	langid = {english},
	keywords = {Artificial Intelligence (incl. Robotics), Computation by Abstract Devices, Logics and Meanings of Programs, Operating Systems, Programming Languages, Compilers, Interpreters, Software Engineering},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/7QHHKBEJ/10.html:text/html}
}

@inproceedings{dalal_model-based_1999,
	location = {New York, {NY}, {USA}},
	title = {Model-based Testing in Practice},
	isbn = {1-58113-074-0},
	url = {http://doi.acm.org/10.1145/302405.302640},
	doi = {10.1145/302405.302640},
	series = {{ICSE} '99},
	pages = {285--294},
	booktitle = {Proceedings of the 21st International Conference on Software Engineering},
	publisher = {{ACM}},
	author = {Dalal, S. R. and Jain, A. and Karunanithi, N. and Leaton, J. M. and Lott, C. M. and Patton, G. C. and Horowitz, B. M.},
	urldate = {2015-03-11},
	date = {1999},
	keywords = {{AETG} software system, automatic test generation, model-based testing}
}
@inproceedings{legeard_generation_2001,
	title = {Generation of functional test sequences from B formal specifications presentation and industrial case-study},
	doi = {10.1109/ASE.2001.989833},
	abstract = {The paper presents an original method to generate test sequences. From formal specifications of the system to be tested, an equivalent system of constraints is derived, and then the domain of each state variable of this system is partitioned into subdomains. Using this partition, limit states are computed with a specific solver that uses constraint logic programming with sets. This specific solver is then used to build test sequences by traversing the constrained reachability graph of the specifications. Finally, the formal specifications are used as an oracle by using them to determine the expected output for a given input. The results of an industrial case-study of the Smart Card {GSM} 11-11 standard are presented and discussed.},
	eventtitle = {16th Annual International Conference on Automated Software Engineering, 2001. ({ASE} 2001). Proceedings},
	pages = {377--381},
	booktitle = {16th Annual International Conference on Automated Software Engineering, 2001. ({ASE} 2001). Proceedings},
	author = {Legeard, B. and Peureux, F.},
	date = {2001-11},
	keywords = {B formal specifications, Computational modeling, constrained reachability graph, constraint handling, constraint logic programming, Content addressable storage, Design engineering, expected output, formal specification, Formal specifications, functional test sequence generation, {GSM}, industrial case-study, limit states, Logic programming, logic testing, Performance evaluation, program testing, reachability analysis, set theory, Smart Card {GSM} 11-11 standard, smart cards, state variable, System testing, test sequence generation},
	file = {IEEE Xplore Abstract Record:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/G4V7MPCT/login.html:text/html}
}
@incollection{veanes_model-based_2008,
	location = {Berlin, Heidelberg},
	title = {Model-based testing of object-oriented reactive systems with spec explorer},
	isbn = {3-540-78916-2, 978-3-540-78916-1},
	url = {http://dl.acm.org/citation.cfm?id=1806209.1806211},
	abstract = {Testing is one of the costliest aspects of commercial software development. Model-based testing is a promising approach addressing these deficits. At Microsoft, model-based testing technology developed by the Foundations of Software Engineering group in Microsoft Research has been used since 2003. The second generation of this tool set, Spec Explorer, deployed in 2004, is now used on a daily basis by Microsoft product groups for testing operating system components, .{NET} framework components and other areas. This chapter provides a comprehensive survey of the concepts of the tool and their foundations.},
	pages = {39--76},
	booktitle = {Formal Methods and Testing},
	publisher = {Springer-Verlag},
	author = {Veanes, Margus and Campbell, Colin and Grieskamp, Wolfgang and Schulte, Wolfram and Tillmann, Nikolai and Nachmanson, Lev},
	editor = {Hierons, Robert M. and Bowen, Jonathan P. and Harman, Mark},
	urldate = {2015-03-11},
	date = {2008}
}
@article{farchi_using_2002,
	title = {Using a model-based test generator to test for standard conformance},
	volume = {41},
	issn = {0018-8670},
	doi = {10.1147/sj.411.0089},
	abstract = {In this paper we describe two experiments in the verification of software standard conformance. In our experiments, we use a model-based test generator to create a test suite for parts of the {POSIX}™ standard and another test suite for the specification of Java™ exception handling. We demonstrate that models derived from specifications produce better test suites than the suites specified by standards. In particular, our test suites achieved higher levels of code coverage with complete test requirements coverage. Moreover, the test suite for the Java study found code defects that were not exposed by other benchmark test suites. The effort involved in producing these models and test suites was comparable to the effort involved in developing a test suite by more conventional methods. We avoid the state space explosion problem by modeling only the external behavior of a specific feature of the standard, without modeling the details of any particular implementation.},
	pages = {89--110},
	number = {1},
	journaltitle = {{IBM} Systems Journal},
	author = {Farchi, E. and Hartman, A. and Pinter, S.S.},
	date = {2002},
	file = {IEEE Xplore Abstract Record:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/U5S4DTFZ/login.html:text/html}
}
@inproceedings{pretschner_one_2005,
	location = {New York, {NY}, {USA}},
	title = {One Evaluation of Model-based Testing and Its Automation},
	isbn = {1-58113-963-2},
	url = {http://doi.acm.org/10.1145/1062455.1062529},
	doi = {10.1145/1062455.1062529},
	series = {{ICSE} 05},
	abstract = {Model-based testing relies on behavior models for the generation of model traces: input and expected output---test cases---for an implementation. We use the case study of an automotive network controller to assess different test suites in terms of error detection, model coverage, and implementation coverage. Some of these suites were generated automatically with and without models, purely at random, and with dedicated functional test selection criteria. Other suites were derived manually, with and without the model at hand. Both automatically and manually derived model-based test suites detected significantly more requirements errors than hand-crafted test suites that were directly derived from the requirements. The number of detected programming errors did not depend on the use of models. Automatically generated model-based test suites detected as many errors as hand-crafted model-based suites with the same number of tests. A sixfold increase in the number of model-based tests led to an 11\% increase in detected errors.},
	pages = {392--401},
	booktitle = {Proceedings of the 27th International Conference on Software Engineering},
	publisher = {{ACM}},
	author = {Pretschner, A. and Prenninger, W. and Wagner, S. and Kühnel, C. and Baumgartner, M. and Sostawa, B. and Zölch, R. and Stauner, T.},
	urldate = {2015-03-11},
	date = {2005},
	keywords = {abstraction, automotive software, coverage, model-based development, test case generation}
}	

@book{hoffmann_theoretische_2011,
	location = {München},
	edition = {Auflage: 2., aktualisierte Auflage},
	title = {Theoretische Informatik},
	isbn = {9783446426399},
	abstract = {Die neue Lehrbuchgeneration - Für das Bachelor-Studium geeignet.- Umfassende verständliche Einführung in die wichtigsten Teilgebiete.- Grundlegende Konzepte, Methoden und Ergebnisse.- Zahlreiche Beispiele und Übungsaufgaben.Das Buch führt umfassend in das Gebiet der theoretischen Informatik ein und behandelt den Stoffumfang, der für das Bachelor-Studium an Universitäten und Fachhochschulen in den Fächern Informatik und Informationstechnik benötigt wird. Die Darstellung und das didaktische Konzept verfolgen das Ziel, einen durchweg praxisnahen Zugang zu den mitunter sehr theoretisch geprägten Themen zu schaffen. Theoretische Informatik muss nicht trocken sein. Sie kann Spaß machen und genau dies versucht das Buch zu vermitteln. Die verschiedenen Methoden und Verfahren werden anhand konkreter Beispiele eingeführt und durch zahlreiche Querverbindungen wird gezeigt, wie die fundamentalen Ergebnisse der theoretischen Informatik die moderne Informationstechnologie prägen. Das Buch behandelt die Themengebiete: Logik und Deduktion, Automatentheorie, formale Sprachen, Entscheidbarkeitstheorie, Berechenbarkeitstheorie und Komplexitätstheorie. Die Lehrinhalte aller Kapitel werden durch zahlreiche Übungsaufgaben komplettiert, so dass sich die Lektüre neben der Verwendung als studienbegleitendes Lehrbuch auch bestens zum Selbststudium eignet. Die 2. Auflage wurde aktualisiert und um neue Aufgaben erweitert.},
	publisher = {Carl Hanser Verlag {GmbH} \& Co. {KG}},
	author = {Hoffmann, Dirk W.},
	date = {2011-08-04}
}
@inproceedings{rombach_design_2009,
	title = {Design for Maintenance - Use of Engineering Principles and Product Line Technology},
	doi = {10.1109/CSMR.2009.48},
	abstract = {Software systems become increasingly complex, embedded into critical technical or business environments, evolving, and long-living. Other engineering disciplines design for modifiability, testability, and many other –ilities a-priori. In software engineering we teach the corresponding principles and laws in software engineering curricula, but we have failed to introduce them into wide-spread practice. There are 2 major reasons for this dissatisfactory situation. First, basic engineering principles for software engineering such as “information hiding” are being taught as scientific concepts, but scaling engineering style application guidelines are missing. Second, software is too a large portion built by people who have never been taught the basics of software engineering. In this presentation critical engineering principles and laws are being presented. They are part of the existing body of knowledge in our field, and they should be considered mandatory in order to avoid violation of due diligence charges. In addition, it will be demonstrated how they can be applied and checked in real projects. Finally, the software product line engineering approach will be presented as incorporating many of these principles and laws. Its potential will be illustrated using real-world examples. The main purpose of this presentation is to demonstrate that we have a large body of knowledge in our field to improve current practice. But improper mindset, technology transfer, and education are prohibiting faster progress.},
	eventtitle = {13th European Conference on Software Maintenance and Reengineering, 2009. {CSMR} '09},
	pages = {1--2},
	booktitle = {13th European Conference on Software Maintenance and Reengineering, 2009. {CSMR} '09},
	author = {Rombach, Dieter},
	date = {2009-03},
	keywords = {Application software, Computer science, Conference Chairs, {CSMR} 2009, Design engineering, Educational institutions, Mathematics, Software Engineering, software maintenance, Software systems, Testing, {USA} Councils, Welcome},
	file = {IEEE Xplore Abstract Record:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/FJ8NCJQU/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/7KVRM9IH/Rombach - 2009 - Design for Maintenance - Use of Engineering Princi.pdf:application/pdf}
}
@inreference{markgraf_definition_2015,
	title = {Definition Qualität},
	url = {http://wirtschaftslexikon.gabler.de/Archiv/55799/qualitaet-v6.html},
	booktitle = {Gabler Wirtschaftslexikon},
	publisher = {Springer},
	author = {Markgraf, Daniel},
	date = {2015}
}
@book{hoffmann_software-qualitat_2013,
	location = {S.l.},
	edition = {Auflage: 2., aktualisierte u. korr. Aufl. 2013},
	title = {Software-Qualität},
	isbn = {9783642356995},
	abstract = {Computerabstürze, Rückrufaktionen, Sicherheitslecks: Das Phänomen Software- Fehler hat sich zum festen Bestandteil unseres täglichen Lebens entwickelt. Mit dem unaufhaltsamen Vordringen der Computertechnik in immer mehr sicherheitskritische Bereiche wird die Software-Qualitätssicherung zu einer stetig wichtiger werdenden Disziplin der Informationstechnik. Aber warum ist die Qualität von Software heute so schlecht? Und viel wichtiger noch: Stehen wir der Misere hilflos gegenüber? Dieses Buch führt umfassend und praxisnah in das Gebiet der Software- Qualitätssicherung ein und gibt eine Antwort auf die oben gestellten Fragen. Zu Beginn werden die typischen Fehlerquellen der Programmentwicklung erörtert und anschließend die verschiedenen Methoden und Techniken behandelt, die uns zur Verbesserung der Qualität zur Verfügung stehen. Behandelt werden die zentralen Themenkomplexe aus den Gebieten der konstruktiven und analytischen Qualitätssicherung, der Software-Infrastruktur und der Managementprozesse. Die 2. Auflage wurde durchgehend aktualisiert und korrigiert.},
	pagetotal = {584},
	publisher = {Springer Vieweg},
	author = {Hoffmann, Dirk W.},
	date = {2013-01-09}
}

@book{shannon_mathematische_1976,
	location = {München},
	title = {Mathematische Grundlagen der Informationstheorie},
	isbn = {9783486398519},
	publisher = {Oldenbourg},
	author = {Shannon, Warren, Claude E. und Weaver},
	date = {1976}
}
@article{guldali_starthilfe_2010,
	title = {{STARTHILFE} {FÜR} {MODELLBASIERTES} {TESTEN}: {ENTSCHEIDUNGSUNTERSTÜTZUNG} {FÜR} {PROJEKT}- {UND} {TESTMANAGER}},
	url = {http://www.sigs-datacom.de/fileadmin/user_upload/zeitschriften/os/2010/03/gueldali_OS_03_10.pdf},
	abstract = {Modellbasiertes Testen ist eine Technik, die durch den Einsatz von abstrakten Modellen und geeigneten Algorithmen bestimmte manuelle Aktivitäten, wie z. B. das Testdesign, unterstützt. Die Einführung von modellbasiertem Testen hat das Potenzial, die Testüberdeckung durch die automatische Generierung von Testfällen zu erhöhen und somit das Vertrauen in die Software zu steigern. Den Einsparungen von manuellen Testaktivitäten steht aber der Zusatzaufwand für die Erstellung der Modelle gegenüber. Projekt- und Testmanager stehen also vor der Frage, ob modellbasiertes Testen in ihrer konkreten Testorganisation eine sinnvolle Investition darstellt. Dieser Artikel erklärt die wesentlichen Begriffe zum Thema modellbasiertes Testen und gibt Entscheidungsträgern eine heuristische Entscheidungshilfe an die Hand.},
	number = {3},
	journaltitle = {{OBJEKTspektrum}},
	author = {Güldali, Baris and Jungmayr, Stefan and Mlynarski, Michael and Neumann, Stefan and Winter, Mario},
	date = {2010}
}

@article{weisleder_modellbasiertes_2011,
	title = {{MODELLBASIERTES} {TESTEN}: {HYPE} {ODER} {REALITÄT}?},
	url = {http://www.sigs-datacom.de/fileadmin/user_upload/zeitschriften/os/2011/06/guildali_OS_06_11.pdf},
	abstract = {Manuelle Testerstellung verursacht hohe Kosten. Im Vergleich dazu bietet modellbasiertes
Testen große Vorteile hinsichtlich Testautomatisierung, früher Fehlerfindung, Erhöhung der
Testabdeckung, effizienten Testentwurfs und besserer Rückverfolgbarkeit. Die Einführung des
modellbasierten Testens ist jedoch mit Investitionen verbunden, für die die Rendite häufig
unklar erscheint. Dabei finden sich in der Literatur bereits etliche Erfahrungsberichte zur
erfolg reichen Einführung von modellbasiertem Testen in unterschiedlichen Anwendungs -
domänen. In diesem Artikel präsentieren wir einen Überblick über einige dieser Erfahrungs -
berichte},
	number = {6},
	journaltitle = {{OBJEKTspektrum}},
	author = {Weißleder, Stephan},
	date = {2011}
}

@article{pinheiro_model-based_2013,
	title = {Model-Based Testing of {RESTful} Web Services Using {UML} Protocol State Machines},
	url = {http://www.sjc.unifesp.br/sast2013/sites/all/files/www.sjc.unifesp.br.sast2013/files/model-based-testing-restful.pdf},
	author = {Pinheiro, Pedro Victor Pontes and Endo, Andre Takeshi and Simao, Adenilso},
	urldate = {2015-02-24},
	date = {2013}
}

@incollection{kaneiwa_consistency_2006,
	title = {Consistency Checking Algorithms for Restricted {UML} Class Diagrams},
	rights = {©2006 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-540-31782-1, 978-3-540-31784-5},
	url = {http://link.springer.com/chapter/10.1007/11663881_13},
	series = {Lecture Notes in Computer Science},
	abstract = {Automatic debugging of {UML} class diagrams helps in the visual specification of software systems because users cannot detect errors in logical inconsistency easily. This paper focuses on tractable consistency checking of {UML} class diagrams. We accurately identify inconsistencies in these diagrams by translating them into first-order predicate logic generalized by counting quantifiers and classify their expressivities by eliminating some components. For class diagrams of different expressive powers, we introduce optimized algorithms that compute their respective consistencies in P, {NP}, {PSPACE}, or {EXPTIME} with respect to the size of a class diagram. In particular, for two cases in which class diagrams contain (i) disjointness constraints and overwriting/multiple inheritances and (ii) these components along with completeness constraints, the restriction of attribute value types decreases the complexities from {EXPTIME} to P and {PSPACE}. Additionally, we confirm the existence of a meaningful restriction of class diagrams that prevents any logical inconsistency.},
	pages = {219--239},
	number = {3861},
	booktitle = {Foundations of Information and Knowledge Systems},
	publisher = {Springer Berlin Heidelberg},
	author = {Kaneiwa, Ken and Satoh, Ken},
	editor = {Dix, Jürgen and Hegner, Stephen J.},
	urldate = {2015-02-26},
	date = {2006},
	langid = {english},
	keywords = {Artificial Intelligence (incl. Robotics), Database Management, Discrete Mathematics in Computer Science, Information Storage and Retrieval, Logics and Meanings of Programs, User Interfaces and Human Computer Interaction},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/JJQPVHKW/10.html:text/html}
}

@article{sensler_testautomatisierung_2011,
	title = {Testautomatisierung mit modellgetriebener Testskript-Entwicklung},
	url = {http://www.sigs.de/publications/os/2006/03/kunz_sensler_OS_03_06.pdf},
	author = {Sensler, Carsten},
	date = {2011}
}

@book{utting_practical_2007,
	address = {Amsterdam ; Boston},
	title = {Practical {Model}-{Based} {Testing}. {A} {Tools} {Approach}},
	isbn = {9780123725011},
	abstract = {This book gives a practical introduction to model-based testing, showing how to write models for testing purposes and how to use model-based testing tools to generate test suites. It is aimed at testers and software developers who wish to use model-based testing, rather than at tool-developers or academics. The book focuses on the mainstream practice of functional black-box testing and covers different styles of models, especially transition-based models (UML state machines) and pre/post models (UML/OCL specifications and B notation). The steps of applying model-based testing are demonstrated on examples and case studies from a variety of software domains, including embedded software and information systems. From this book, you will learn: the basic principles and terminology of model-based testing; how model-based testing differs from other testing processes; how model-based testing fits into typical software lifecycles such as agile methods and the Unified Process; the benefits and limitations of model-based testing, its cost effectiveness and how it can reduce time-to-market; a step-by-step process for applying model-based testing; how to write good models for model-based testing; how to use a variety of test selection criteria to control the tests that are generated from your models; and how model-based testing can connect to existing automated test execution platforms such as Mercury Test Director, Java JUnit, and proprietary test execution environments. This book shows how model-based testing fits into the software lifecycle, its cost-effectiveness, and how it can reduce time to market. It offers guidance on how to use different kinds of modeling techniques, useful test generation strategies, how to apply model-based testing techniques to real applications using case studies.},
	language = {Englisch},
	publisher = {Elsevier Ltd, Oxford},
	author = {Utting, Mark and Legeard, Bruno},
	month = jan,
	year = {2007}
}


@misc{giese_warum_2002,
	title = {Warum explodierten Mariner 1, Ariane 5, ... oder: Was kümmern mich die Probleme der Datenverarbeitung},
	url = {https://web-docs.gsi.de/~giese/swr/},
	author = {Giese, Ingolf},
	month = feb,
	year = {2002}
}

@book{thaller_software-test:_2002,
	address = {Hannover},
	edition = {Auflage: 2., aktualis. u. erw. Aufl.},
	title = {Software-Test: Verifikation und Validation},
	isbn = {9783882291988},
	shorttitle = {Software-Test},
	language = {Deutsch},
	publisher = {Heise, H},
	author = {Thaller, Georg E.},
	month = apr,
	year = {2002}
}

@book{rossner_basiswissen_2010,
	title = {Basiswissen modellbasierter Test},
	url = {http://www.dpunkt.de/buecher/3064.html},
	abstract = {Modellbasiertes Testen ({MBT}) entwickelt sich von einer Forschungsdisziplin zu einer in der Industrie eingesetzten Praxis. Dieses Buch stellt die Grundlagen modellbasierten Testens dar und gibt einen Überblick über verschiedene Modellierungssprachen und -methoden. Es zeigt auf, welche Voraussetzungen für den Einsatz modellbasierter Testmethoden in einer Organisation zu schaffen sind, welche möglichen Fallstricke eine erfolgreiche Einführung verhindern können, wie man diese Fallstricke vermeidet und welche Qualitätsgewinne und Einsparungspotenziale durch {MBT} möglich sind.},
	author = {Rossner, Thomas and Brandes, Christian and Goetz, Helmut and Winter, Mario},
	urldate = {2015-02-20},
	date = {2010},
	file = {Snapshot:/Users/shady/Library/Application Support/Zotero/Profiles/1ad4chnd.default/zotero/storage/3FK9CEVA/3064.html:text/html}
}

@book{vigenschow_objektorientiertes_2004,
	address = {Heidelberg},
	edition = {Auflage: 1., Aufl.},
	title = {Objektorientiertes Testen und Testautomatisierung in der Praxis: Konzepte, Techniken und Verfahren},
	isbn = {9783898643054},
	shorttitle = {Objektorientiertes Testen und Testautomatisierung in der Praxis},
	abstract = {Objektorientierte Software mit ihren spezifischen Fehlerquellen hat die Herausforderungen an die Softwareentwicklung erhöht. Wie können effizient qualitativ gute Programme geschrieben werden? Die Antwort darauf ist heutzutage ein modernes, testgetriebenes Design. Doch wie erreicht man eine minimale Anzahl von Testfällen, die ein Maximum der Fehlermöglichkeiten abdecken? Wie findet man aussagekräftige Testdaten? Wie kann bereits innerhalb der Softwareentwicklung automatisiert getestet werden? Das Buch stellt auf pragmatische Weise klassische und moderne Testtheorien und -verfahren vor. Dabei werden Lösungen für technische, analytische und methodische Probleme sowie zum Test von objektorientierter Software aufgezeigt. Auch auf organisatorische Faktoren und Teststrategien wird eingegangen. Die Umsetzung in der Praxis kann anhand von konkreten Beipielen für {JUnit}, {CppUnit} und {NUnit} nachvollzogen werden. Weiter wird gezeigt, wie der Einsatz von Testmustern den Test von objektorientierter Software erleichtern kann. Da im Zusammenhang mit Objektorientierung die {UML} als Modellierungssprache immer stärker in den Mittelpunkt rückt, wird exemplarisch dargestellt, wie {UML}-Diagramme im Rahmen eines inkrementell-iterativen Entwicklungsprozesses für die Testfall-Findung genutzt werden. Zusätzlich werden Lösungen für die Probleme beim Einsatz der {UML} durch den Versionswechsel von {UML} 1.* zu 2.0 vorgestellt. Neben der Objektorientierung und der Testautomatisierung liegt ein weiterer Schwerpunkt auf Realtime- und Embedded Systems mit ihren besonderen Anforderungen, u.a. wird der Aspekt der Robustheit behandelt. Auf der Buch-Website www.oo-testen.de finden sich der Sourcode der Beispiele und weitere hilfreiche Informationen zum Thema.},
	language = {Deutsch},
	publisher = {"dpunkt.verlag {GmbH}"},
	author = {Vigenschow, Uwe},
	month = sep,
	year = {2004}
}

% ----------------------------------------------------------
% This file was created with JabRef 2.7b.
% Encoding: ISO8859_1

@INBOOK{fankhauser:2009:softwaretechnik-security,
  chapter = {13},
  pages = {589--646},
  title = {Softwaretechnik - Mit Fallbeispielen aus realen Entwicklungsprojekten},
  publisher = {Pearson Studium},
  year = {2009},
  author = {Fankhauser, Florian and Schanes, Christian and Brem, Christian},
  address = {M{\"u}nchen},
  edition = {1},
  bibsource = {esse},
  url = {http://www.inso.tuwien.ac.at/publications/softwaretechnik/}
}

@OTHER{oasis:2010:homepage,
  author = {Oasis},
  lastchecked = {26.11.2011},
  title = {Organization for the advancement of structured information standards},
  url = {http://www.oasis-open.org},
  year = {2010}
}

@ARTICLE{schanes:2011:voip-fuzzer,
  author = {Schanes, Christian and Taber, Stefan and Popp, Karin and Fankhauser,
	Florian and Grechenig, Thomas},
  title = {Security Test Approach for Automated Detection of Vulnerabilities
	of SIP-based VoIP Softphones},
  journal = {International Journal On Advances in Security},
  year = {2011},
  volume = {4},
  pages = {95--105},
  number = {1 and 2},
  month = sep,
  abstract = {Voice over Internet Protocol based systems replace phone lines in
	many scenarios and are in wide use today. Automated security tests
	of such systems are required to detect implementation and configuration
	mistakes early and in an efficient way. In this paper we present
	a plugin for our fuzzer framework fuzzolution to automatically detect
	security vulnerabilities in Session Initiation Protocol based Voice
	over Internet Protocol softphones, which are examples for endpoints
	in such telephone systems. The presented approach automates the interaction
	with the Graphical User Interface of the softphones during test execution
	and also observes the behavior of the softphones using multiple metrics.
	Results of testing two open source softphones by using our fuzzer
	showed that various unknown vulnerabilities could be identified with
	the implemented plugin for our fuzzing framework.},
  bibsource = {esse},
  booktitle = {International Journal On Advances in Security, volume 4, numbers
	1 and 2, 2011},
  keywords = {ESSE, Software testing; Computer network security; Graphical user
	interfaces; Internet telephony; Fuzzing},
  publisher = {IEEE Computer Society Press},
  url = {\url{http://www.iariajournals.org/security/tocv4n12.html}}
}